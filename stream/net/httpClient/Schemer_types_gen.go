package httpClient

import (
	"github.com/ddkwork/golibrary/stream"
	"strings"
)

// Code generated by EnumTypesGen - DO NOT EDIT.

type SchemerType uint8

const (
	HttpType SchemerType = iota
	HttpsType
	Socket4Type
	Socket5Type
	WebSocketType
	WebsocketTlsType
	TcpType
	TcpTlsType
	UdpType
	KcpType
	PipeType
	QuicType
	RpcType
	SshType
)

func (t SchemerType) Valid() bool {
	return t >= HttpType && t <= SshType
}

func SchemerTypeBy[T stream.Integer](v T) SchemerType {
	return SchemerType(v)
}

func (t SchemerType) AssertBy(name string) SchemerType {
	name = strings.TrimSuffix(name, "Type")
	for _, n := range t.EnumTypes() {
		if strings.EqualFold(name, n.String()) {
			return n
		}
	}
	panic("InvalidType")
}

func (t SchemerType) String() string {
	switch t {
	case HttpType:
		return "Http"
	case HttpsType:
		return "Https"
	case Socket4Type:
		return "Socket4"
	case Socket5Type:
		return "Socket5"
	case WebSocketType:
		return "WebSocket"
	case WebsocketTlsType:
		return "WebsocketTls"
	case TcpType:
		return "Tcp"
	case TcpTlsType:
		return "TcpTls"
	case UdpType:
		return "Udp"
	case KcpType:
		return "Kcp"
	case PipeType:
		return "Pipe"
	case QuicType:
		return "Quic"
	case RpcType:
		return "Rpc"
	case SshType:
		return "Ssh"
	default:
		panic("InvalidType")
	}
}

func (t SchemerType) Tooltip() string {
	switch t {
	case HttpType:
		return "Http"
	case HttpsType:
		return "Https"
	case Socket4Type:
		return "Socket4"
	case Socket5Type:
		return "Socket5"
	case WebSocketType:
		return "WebSocket"
	case WebsocketTlsType:
		return "WebsocketTls"
	case TcpType:
		return "Tcp"
	case TcpTlsType:
		return "TcpTls"
	case UdpType:
		return "Udp"
	case KcpType:
		return "Kcp"
	case PipeType:
		return "Pipe"
	case QuicType:
		return "Quic"
	case RpcType:
		return "Rpc"
	case SshType:
		return "Ssh"
	default:
		panic("InvalidType")
	}
}

func (t SchemerType) Names() []string {
	return []string{
		"Http",
		"Https",
		"Socket4",
		"Socket5",
		"WebSocket",
		"WebsocketTls",
		"Tcp",
		"TcpTls",
		"Udp",
		"Kcp",
		"Pipe",
		"Quic",
		"Rpc",
		"Ssh",
	}
}

func (t SchemerType) EnumTypes() []SchemerType {
	return []SchemerType{
		HttpType,
		HttpsType,
		Socket4Type,
		Socket5Type,
		WebSocketType,
		WebsocketTlsType,
		TcpType,
		TcpTlsType,
		UdpType,
		KcpType,
		PipeType,
		QuicType,
		RpcType,
		SshType,
	}
}

func (t SchemerType) SvgFileName() string {
	return t.String() + ".svg"
}

func (l SchemerType) IsStream() bool {
	switch l {
	case HttpType, HttpsType:
		return false
	default:
		return true

	}
}

func (l SchemerType) IsContainer() bool {
	return l.IsStream()
}

func (l SchemerType) Containers() []SchemerType {
	return []SchemerType{
		WebSocketType,
		KcpType,
		PipeType,
		QuicType,
		RpcType,
		Socket4Type,
		Socket5Type,
		SshType,
		TcpType,
		TcpTlsType,
		UdpType,
		WebsocketTlsType,
	}
}
